{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","id","className","App_Sidebar","App_Content","Component","Sidebar","Content","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","items","error","apiUrl","fetchBreweries","_this2","fetch","then","response","json","data","setState","catch","_this$state","type","placeholder","message","map","brewery","name","App_Footer","Footer","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAIMA,0LAIF,OAGEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,SAASC,UAAU,UAEzBJ,EAAAC,EAAAC,cAACG,EAAD,MACAL,EAAAC,EAAAC,cAACI,EAAD,cAVUC,cAkBZC,mLAGF,OACER,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kCACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UAGbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,iBAAd,kCARYG,aAiBhBE,cAGJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,WAAW,EACXC,MAAO,GACPC,MAAO,KAEPC,OAAO,yEARQX,mFAcjBG,KAAKS,0DAwBU,IAAAC,EAAAV,KACfW,MAAMX,KAAKI,MAAMI,QACdI,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OACRL,EAAKM,SAAS,CACZV,MAAOS,EACPV,WAAW,MAGdY,MAAM,SAAAV,GAAK,OACVG,EAAKM,SAAS,CACZT,QACAF,WAAU,uCAMT,IAAAa,EAE6BlB,KAAKI,MAAtBE,GAFZY,EAECb,UAFDa,EAEYZ,OAAOC,EAFnBW,EAEmBX,MAC1B,OACErB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kCACbJ,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,aACdJ,EAAAC,EAAAC,cAAA,gBACEF,EAAAC,EAAAC,cAAA,SAAO+B,KAAK,OAAO7B,UAAU,qBAAqB8B,YAAY,aAC9DlC,EAAAC,EAAAC,cAAA,UAAQ+B,KAAK,SAAS7B,UAAU,mCAAhC,aAKLiB,EAAQrB,EAAAC,EAAAC,cAAA,SAAImB,EAAMc,SAAe,KAClCnC,EAAAC,EAAAC,cAAA,UACCkB,EAAMgB,IAAK,SAAAC,GACSA,EAAZlC,GADc,IACVmC,EAAQD,EAARC,KACX,OAAQtC,EAAAC,EAAAC,cAAA,UAAKoC,OASjBtC,EAAAC,EAAAC,cAACqC,EAAD,cAxFchC,aAkGhBiC,mLAEF,OACExC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kCACbJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,kBAAiBJ,EAAAC,EAAAC,cAAA,KAAGuC,KAAK,uBAAuBrC,UAAU,kBAAzC,UAC/BJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,kBAAiBJ,EAAAC,EAAAC,cAAA,KAAGuC,KAAK,gCAAgCrC,UAAU,kBAAlD,YAC/BJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,kBAAiBJ,EAAAC,EAAAC,cAAA,KAAGuC,KAAK,+BAA+BrC,UAAU,kBAAjD,qBARtBG,aAiBNR,IC9IK2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.697ba5e7.chunk.js","sourcesContent":["import React, { Component } from 'react';\n//import logo from './cryptocurrencies.png';\nimport './App.css';\n\nclass App extends Component {\n\n \n  render() {\n    return (\n\n\n      <div id=\"layout\" className=\"pure-g\">\n\n        <Sidebar />\n        <Content />\n\n\n      </div>\n    );\n  }\n}\n\nclass Sidebar extends Component {\n\n  render() {\n    return (\n      <div className=\"sidebar pure-u-1 pure-u-md-1-4\">\n        <div className=\"header\">\n\n          { /**  <img alt=\"Crypto Logo\" className=\"pure-img-responsive\" src={logo} /> */}\n          <h2 className=\"brand-tagline\">Binge Brewery Search </h2>\n\n\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Content extends Component {\n\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,      \n      items: [],\n      error: null,\n     // apiUrl:\"http://localhost:8080/breweries\",\n      apiUrl:\"https://murmuring-basin-65291.herokuapp.com/breweries?page=1&count=50\",\n      //apiUrl: \"https://api.openbrewerydb.org/breweries?sort=+name&page=1&per_page=40\"\n    };\n  }\n\n  componentDidMount() {\n    this.fetchBreweries();\n\n  }\n\n/*\nfetchBreweries2(){\n  axios.get(this.state.apiUrl, {crossDomain:true})\n    \n    .then(response => \n      this.setState({ \n        items: response.data, \n        isLoading: false \n      })\n      )\n    .catch(error => \n      this.setState({\n        error, \n        isLoading:false\n      })\n    );\n}\n*/\n\n\n  fetchBreweries() {\n    fetch(this.state.apiUrl)\n      .then(response => response.json())\n      .then(data => \n        this.setState({ \n          items: data, \n          isLoading: false \n        })\n        )\n      .catch(error => \n        this.setState({\n          error, \n          isLoading:false\n        })\n      );\n  }\n \n\n  render() {\n\n    const { isLoading, items, error } = this.state;\n    return (\n      <div className=\"content pure-u-1 pure-u-md-3-4\">\n        <div>\n\n          <div className=\"searchform\">\n            <form className=\"pure-form\">\n              <fieldset>\n                <input type=\"text\" className=\"pure-input-rounded\" placeholder=\"search..\" />\n                <button type=\"submit\" className=\"pure-button pure-button-primary\">Search</button>\n              </fieldset>\n            </form>\n          </div>\n\n          {error ? <p>{error.message}</p> : null}\n          <ul>\n          {items.map (brewery => {\n            const {id, name} = brewery;\n            return (<li>{name}</li>);\n\n          })}\n\n          </ul>\n\n          \n        </div>\n\n        <Footer />\n\n      </div>\n\n\n    );\n  }\n}\n\n\nclass Footer extends Component {\n  render() {\n    return (\n      <div className=\"footer\">\n        <div className=\"pure-menu pure-menu-horizontal\">\n          <ul>\n            <li className=\"pure-menu-item\"><a href=\"https://naveenhn.in/\" className=\"pure-menu-link\">About</a></li>\n            <li className=\"pure-menu-item\"><a href=\"https://twitter.com/naveenhn/\" className=\"pure-menu-link\">Twitter</a></li>\n            <li className=\"pure-menu-item\"><a href=\"https://github.com/naveenhn/\" className=\"pure-menu-link\">GitHub</a></li>\n          </ul>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}